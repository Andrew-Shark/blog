const express = require("express");
const mongoose = require("mongoose");
const nodemailer = require("nodemailer");
const cron = require("node-cron");
const cors = require("cors");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());


mongoose.connect("mongodb://127.0.0.1:27017/blog")
  .then(() => console.log("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB (Email Server)"))
  .catch((error) => console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:", error));

//–ú–æ–¥–µ–ª—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
const Subscriber = mongoose.model("Subscriber", new mongoose.Schema({
  email: { type: String, required: true, unique: true }
}));

//–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–µ–π
const Article = mongoose.model("Article", new mongoose.Schema({
  title: { type: String, required: true },
  category: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
}));

//–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤
const getNewPostsCount = async () => {
  const oneDayAgo = new Date();
  oneDayAgo.setDate(oneDayAgo.getDate() - 1); 

  const categories = ["Nature", "Photography", "Relaxation", "Vacation", "Travel", "Adventure"];
  const stats = {};

  for (const category of categories) {
    const count = await Article.countDocuments({ category, createdAt: { $gte: oneDayAgo } });
    stats[category] = count;
  }

  return stats;
};

// SMTP
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER, //(Gmail)
    pass: process.env.EMAIL_PASS  //–ü–∞—Ä–æ–ª—å –∞–±–æ "App Password"
  }
});

//–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è email
const sendDailyEmail = async () => {
  try {
    const subscribers = await Subscriber.find();
    if (subscribers.length === 0) {
      console.log("–ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.");
      return;
    }

    const stats = await getNewPostsCount();
    let emailContent = "<h2>–ù–æ–≤—ñ —Å—Ç–∞—Ç—Ç—ñ —É –≤–∞—à–æ–º—É –±–ª–æ–∑—ñ:</h2><ul>";

    for (const [category, count] of Object.entries(stats)) {
      emailContent += `<li><b>${category}:</b> ${count} –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤</li>`;
    }
    emailContent += "</ul>";

    const emailList = subscribers.map(sub => sub.email);

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: emailList,
      subject: "üì¢ –©–æ–¥–µ–Ω–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–ª–æ–≥—É",
      html: emailContent
    };

    await transporter.sendMail(mailOptions);
    console.log("Email-—Ä–æ–∑—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email:", error);
  }
};

//–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ (—Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å –æ 08:00)
cron.schedule("0 8 * * *", () => {
  console.log("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —â–æ–¥–µ–Ω–Ω–∞ email-—Ä–æ–∑—Å–∏–ª–∫–∞...");
  sendDailyEmail();
});


const PORT = 5004;
app.listen(PORT, () => console.log(`Email Server –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

//sendDailyEmail(); // –ó–∞–ø—É—Å–∫–∞—î —Ä–æ–∑—Å–∏–ª–∫—É –≤—Ä—É—á–Ω—É
